import{_ as e,c as o,o as d,a6 as a}from"./chunks/framework.DJOiR4ue.js";const j=JSON.parse('{"title":"Node.js介绍","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"backend/node01.md","filePath":"backend/node01.md","lastUpdated":null}'),c={name:"backend/node01.md"},t=a('<h1 id="node-js介绍" tabindex="-1">Node.js介绍 <a class="header-anchor" href="#node-js介绍" aria-label="Permalink to &quot;Node.js介绍&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><ul><li><ol><li><code>Node.js</code> 并不是 <code>JavaScript</code> 应用，也不是编程语言，而是一个开源、跨平台的 <code>JavaScript</code> 运行时环境。</li></ol></li><li><ol start="2"><li><code>Node.js</code> 是构建在 <code>Chrome V8</code> 引擎之上的，V8引擎是由 <code>C/C++</code> 编写的，因此我们的 <code>JavaScript</code> 代码需要由 <code>C/C++</code> 转化后再执行。</li></ol></li><li><ol start="3"><li><code>Node.js</code> 使用异步 <code>I/O</code> 和事件驱动的设计理念，可以高效地处理大量并发请求，提供了非阻塞式 <code>I/O</code> 接口和事件循环机制，使得开发人员可以编写高性能、可扩展的应用程序，异步 <code>I/O</code> 最终都是由 <code>libuv</code> 事件循环库去实现的。</li></ol></li><li><ol start="4"><li><code>Node.js</code> 使用 <code>npm</code> 作为包管理工具，类似于 <code>Python</code> 的 <code>pip</code> ，或者是 <code>Java</code> 的 <code>Maven</code> ，目前 <code>npm</code> 拥有上百万个模块。www.npmjs.com/</li></ol></li><li><ol start="5"><li><code>Node.js</code> 适合干一些IO密集型应用，不适合CPU密集型应用， <code>Node.js</code> IO 依靠 <code>libuv</code> 有很强的处理能力，而CPU因为 <code>Node.js</code> 单线程原因，容易造成CPU占用率高，如果非要做CPU密集型应用，可以使用 <code>C++</code> 插件编写 或者 <code>Nodejs</code>提供的 <code>cluster</code> 。(CPU密集型指的是图像的处理 或者音频处理需要大量数据结构 + 算法)</li></ol></li></ul><h2 id="node-js-下载" tabindex="-1">Node.js 下载 <a class="header-anchor" href="#node-js-下载" aria-label="Permalink to &quot;Node.js 下载&quot;">​</a></h2><p>可以通过Nvm来管理不同版本的Node.js。记得更改镜像下载地址。</p><h2 id="node-js-应用场景" tabindex="-1">Node.js 应用场景 <a class="header-anchor" href="#node-js-应用场景" aria-label="Permalink to &quot;Node.js 应用场景&quot;">​</a></h2><p>以下展示并不是所有东西都是 <code>Node.js</code> 编写而是运行环境可以配合 <code>Node.js</code> 或者依靠 <code>Node.js</code> 运行。</p><h3 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h3><p><code>Vue</code> <code>Angular</code> <code>React</code> <code>Nuxt.js</code> <code>Next.js</code></p><h3 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h3><p><code>serverLess</code></p><p>web应用 <code>Express</code> <code>Nest.js</code> <code>koa</code></p><p>RPC 服务 gRPC</p><p>爬虫 <code>Puppeteer</code> <code>Cheerio</code></p><p>BFF层 网关层</p><p>及时性应用 <code>Socket.io</code></p><h3 id="桌前端" tabindex="-1">桌前端 <a class="header-anchor" href="#桌前端" aria-label="Permalink to &quot;桌前端&quot;">​</a></h3><p><code>Electron</code> <code>Tauri</code> <code>NW.js</code></p><h3 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h3><p><code>weex</code> <code>ionic</code> <code>hybrid</code> <code>React Native</code></p><h3 id="基建端" tabindex="-1">基建端 <a class="header-anchor" href="#基建端" aria-label="Permalink to &quot;基建端&quot;">​</a></h3><p><code>Webpack</code> <code>Vite</code> <code>Rollup</code> <code>Gulp</code></p><p><code>Less</code> <code>Scss</code> <code>PostCss</code></p><p><code>Babel</code> <code>Swc</code></p><p><code>inquire</code> <code>command</code> <code>shelljs</code></p><h3 id="嵌入式" tabindex="-1">嵌入式 <a class="header-anchor" href="#嵌入式" aria-label="Permalink to &quot;嵌入式&quot;">​</a></h3><p>Ruff js</p><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><p>jest vitest e2e</p><h3 id="cicd" tabindex="-1">CICD <a class="header-anchor" href="#cicd" aria-label="Permalink to &quot;CICD&quot;">​</a></h3><p>Jenkins docker Husky miniprogram-ci</p><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><p>http-proxy Any-proxy</p><h2 id="结束语" tabindex="-1">结束语 <a class="header-anchor" href="#结束语" aria-label="Permalink to &quot;结束语&quot;">​</a></h2><p>通过本章的学习你可以了解到nodejs 高性能 可扩展 简单，及一些使用场景等。</p>',35),i=[t];function r(l,s,n,h,p,u){return d(),o("div",null,i)}const m=e(c,[["render",r]]);export{j as __pageData,m as default};
